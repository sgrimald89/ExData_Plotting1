trainingY<-read.table("UCI HAR Dataset/train/y_train.txt")
trainingSubjects<-read.table("UCI HAR Dataset/train/subject_train.txt")
#appends subjects data from test to training sets
allSubjects<-rbind(testSubjects,trainingSubjects)
names(allSubjects)<-"subject.number"
#appends Y data from test to training sets
allY<-rbind(testY,trainingY)
names(allY)<-"activity_id"
#appends X data from test to training sets
allX<-rbind(testX,trainingX)
#renames variables to more easily readable names
features<-read.table("UCI HAR Dataset/features.txt")
names(allX)<-features$V2
relevantVariables<-c(grep("mean()",features$V2,fixed=TRUE), grep("std()",features$V2,fixed=TRUE))
finalX<-allX[,relevantVariables]
#combines the subject data the activity data and the features
fulldata<-cbind(allSubjects,allY,finalX)
#renames activity feature to a human readable format
activities<- read.table("UCI HAR Dataset/activity_labels.txt")
names(activities)<-c("activity_id","activity")
cleanFull<-merge(activities,fulldata,by="activity_id")
tidyData<-subset(cleanFull,select=-activity_id)
#outputs the first tidyData set
write.table(tidyData, "tidyData.txt")
#finds the average for each variable with a mean() or std() string
aggdata<-aggregate(tidyData,by=list(subject.number=tidyData$subject.number,activity=tidyData$activity),FUN=mean,na.rm=TRUE)
#deletes unnecearry new columns
aggdata<-aggdata[,-c(3,4)]
#outputs the table with the averages
write.table(aggdata,"TidyDataAverage.txt")
View(aggdata)
VariablesCodebook<-features[relevantVariables,]
View(VariablesCodebook)
VariablesCodebook<-features[relevantVariables,3]
features<-read.table("UCI HAR Dataset/features.txt")
names(allX)<-features$V2
relevantVariables<-c(grep("mean()",features$V2,fixed=TRUE), grep("std()",features$V2,fixed=TRUE))
VariablesCodebook<-features[relevantVariables,2]
VariablesCodebook
VariablesCodebook<-features[relevantVariables]
VariablesCodebook<-features[relevantVariables,]
View(VariablesCodebook)
VariablesCodebook<-features[relevantVariables,2]
write.table(VariablesCodebook,"Codebook.txt")
library(plyr)
#if the UCI HAR Dataset folder does not exist in the working directory it will
#download the data and create the folder in the working directory
if(!file.exists("UCI HAR Dataset")){
fileURL<-"https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
zipfile="UCI_HAR_data.zip"
download.file(fileURL,destfile=zipfile,method="curl")
unzip(zipfile, exdir=".")
}
#reads all the downloaded data
testX<-read.table("UCI HAR Dataset/test/X_test.txt")
testY<-read.table("UCI HAR Dataset/test/y_test.txt")
testSubjects<-read.table("UCI HAR Dataset/test/subject_test.txt")
trainingX <- read.table("UCI HAR Dataset/train/X_train.txt")
trainingY<-read.table("UCI HAR Dataset/train/y_train.txt")
trainingSubjects<-read.table("UCI HAR Dataset/train/subject_train.txt")
#appends subjects data from test to training sets
allSubjects<-rbind(testSubjects,trainingSubjects)
names(allSubjects)<-"subject.number"
#appends Y data from test to training sets
allY<-rbind(testY,trainingY)
names(allY)<-"activity_id"
#appends X data from test to training sets
allX<-rbind(testX,trainingX)
#renames variables to more easily readable names
features<-read.table("UCI HAR Dataset/features.txt")
names(allX)<-features$V2
relevantVariables<-c(grep("mean()",features$V2,fixed=TRUE), grep("std()",features$V2,fixed=TRUE))
VariablesCodebook<-features[relevantVariables,2]
finalX<-allX[,relevantVariables]
#combines the subject data the activity data and the features
fulldata<-cbind(allSubjects,allY,finalX)
#renames activity feature to a human readable format
activities<- read.table("UCI HAR Dataset/activity_labels.txt")
names(activities)<-c("activity_id","activity")
cleanFull<-merge(activities,fulldata,by="activity_id")
tidyData<-subset(cleanFull,select=-activity_id)
#finds the average for each variable with a mean() or std() string
aggdata<-aggregate(tidyData,by=list(subject.number=tidyData$subject.number,activity=tidyData$activity),FUN=mean,na.rm=TRUE)
#deletes unnecearry new columns
aggdata<-aggdata[,-c(3,4)]
#outputs the table with the averages
write.table(aggdata,"TidyData.txt",quote=FALSE, row.names=FALSE)
write.table(VariablesCodebook,"Codebook.txt",quote=FALSE, row.names=FALSE)
View(allX)
View(tidy)
library(MASS)
data(mtcars)
library(MASS)
mtcars<-data(mtcars)
mtcafrs
mtcars
data(mtcars)
?MASS
data(mtcars)
data(mtcars)
data(mtcars)
library(ggplot2)
library(car)
data(mtcars)
library(ggplot2)
library(car)
data(mtcars)
library(ggplot2)
library(car)
data(mtcars)
?mtcars
View(mtcars)
View(mtcars)
lm(mpg~.)
lm(mpg~.,data=mtcars)
summary(lm(mpg~.,data=mtcars))
summary(lm(mpg~.+0,data=mtcars))
summary(lm(mpg~ cyl,data=mtcars))
summary(lm(mpg~ cyl disp,data=mtcars))
summary(lm(mpg~ cyl disp ,data=mtcars))
summary(lm(mpg~ cyl+ disp ,data=mtcars))
summary(lm(mpg~ cyl+hp ,data=mtcars))
summary(lm(mpg~ cyl+disp+hp ,data=mtcars))
summary(lm(mpg~ cyl+disp+hp+wt ,data=mtcars))
summary(lm(mpg~ am+ cyl ,data=mtcars))
summary(lm(mpg~ am+ cyl+disp ,data=mtcars))
summary(lm(mpg~ am+ cyl+disp+hp ,data=mtcars))
summary(lm(mpg~ am+ cyl+disp+hp+drat+wt+qsec+vs+gear+carb ,data=mtcars))
summary(lm(mpg~ . ,data=mtcars))
summary(lm(formula = mpg ~ am + cyl  + hp  + wt + qsec + vs  + carb, data = mtcars))
summary(lm(formula = mpg ~ am + cyl  + hp  + wt + qsec + vs  , data = mtcars))
summary(lm(formula = mpg ~ am + cyl + disp + hp + drat + wt + qsec +
vs + gear + carb, data = mtcars))
summary(lm(formula = mpg ~ am + cyl + disp + hp + drat + wt + qsec +
vs + gear, data = mtcars))
summary(lm(formula = mpg ~ am + cyl + disp + hp + drat + wt + qsec +
vs , data = mtcars))
summary(lm(formula = mpg ~ am + cyl  + hp + drat + wt + qsec +
vs , data = mtcars))
summary(lm(formula = mpg ~ am + cyl  + hp  + wt + qsec +
vs , data = mtcars))
summary(lm(formula = mpg ~ am + cyl  + hp  + wt + qsec, data = mtcars))
summary(lm(formula = mpg ~ am   + hp  + wt + qsec, data = mtcars))
summary(lm(formula = mpg ~ am    + wt + qsec, data = mtcars))
summary(lm(formula = mpg ~ am + cyl   + wt + qsec, data = mtcars))
summary(lm(formula = mpg ~ am + gear   + wt + qsec, data = mtcars))
summary(lm(formula = mpg ~ am + vs   + wt + qsec, data = mtcars))
summary(lm(formula = mpg ~ am + hp   + wt + qsec, data = mtcars))
summary(lm(formula = mpg ~ am   + wt + qsec, data = mtcars))
install.packages("knitr")
lm(mpg~cylinders+wt)
lm(mpg~cyl+wt, data=mtcars)
lm(mpg~factor(cyl)+wt, data=mtcars)
lm(mpg~factor(cyl)+wt+factor(cyl)*wt, data=mtcars)
lm(mpg~factor(cyl)+wt, data=mtcars)
lm(mpg~factor(cyl), data=mtcars)
fit1<-lm(mpg~factor(cyl)+wt, data=mtcars)
fit2<-lm(mpg~factor(cyl)*wt,data=mtcars
)
fit2
anova(fit1,fit2)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars
)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit<-lm(y~x)
round(hatvalues(fit)[1:10],3)
fit<-lm(y~x)
round(dfbetas(fit)[1:10,2],3)
round(dfbetas(fit)[1:5,2],3)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
fit1<-lm(formula = mpg ~ am   + wt + qsec, data = mtcars)
fit2<-lm(formula=mpg ~ am   + wt + qsec+cyl*wt, data = mtcars))
anova(fit1,fit2)
fit1<-lm(formula = mpg ~ am   + wt + qsec, data = mtcars)
fit2<-lm(formula=mpg ~ am   + wt + qsec+cyl*hp, data = mtcars))
anova(fit1,fit2)
fit1<-lm(formula = mpg ~ am   + wt + qsec, data = mtcars)
fit2<-lm(formula=mpg ~ am   + wt + qsec+cyl*hp, data = mtcars)
anova(fit1,fit2)
fit1<-lm(formula = mpg ~ am   + wt + qsec, data = mtcars)
fit2<-lm(formula=mpg ~ am   + wt + qsec+cyl*wt, data = mtcars)
anova(fit1,fit2)
fit1<-lm(formula = mpg ~ am   + wt + qsec, data = mtcars)
fit2<-lm(formula=mpg ~ am   + wt + qsec+factor(cyl)*wt, data = mtcars)
anova(fit1,fit2)
fit1<-lm(formula = mpg ~ am   + wt + qsec, data = mtcars)
fit2<-lm(formula=mpg ~ am   + wt + qsec+factor(cyl), data = mtcars)
anova(fit1,fit2)
fit1<-lm(formula = mpg ~ am   + wt + qsec, data = mtcars)
fit2<-lm(formula=mpg ~ am   + wt + qsec+factor(cyl)*hp, data = mtcars)
anova(fit1,fit2)
fit1<-lm(formula = mpg ~ am   + wt + qsec, data = mtcars)
fit2<-lm(formula=mpg ~ am   + wt + qsec+*hp, data = mtcars)
anova(fit1,fit2)
fit1<-lm(formula = mpg ~ am   + wt + qsec, data = mtcars)
fit2<-lm(formula=mpg ~ am   + wt + qsec+hp, data = mtcars)
anova(fit1,fit2)
fit1<-lm(formula = mpg ~ am   + wt + qsec, data = mtcars)
fit2<-lm(formula=mpg ~ am   + wt + qsec+am*wt, data = mtcars)
anova(fit1,fit2)
fit1<-lm(formula = mpg ~ am   + wt + qsec+am*wt, data = mtcars)
fit2<-lm(formula=mpg ~ am   + wt + qsec+am*wt + am*qsec, data = mtcars)
anova(fit1,fit2)
fit1<-lm(formula = mpg ~ am   + wt + qsec+am*wt, data = mtcars)
fit2<-lm(formula=mpg ~ am   + wt + qsec+am*wt + factor(cyl), data = mtcars)
anova(fit1,fit2)
fit1<-lm(formula = mpg ~ am   + wt + qsec+am*wt, data = mtcars)
fit2<-lm(formula=mpg ~ am   + wt + qsec+am*wt + wt*factor(cyl), data = mtcars)
anova(fit1,fit2)
fit1<-lm(formula = mpg ~ am   + wt + qsec+am*wt, data = mtcars)
fit2<-lm(formula=mpg ~ am   + wt + qsec+am*wt + am*factor(cyl), data = mtcars)
anova(fit1,fit2)
fit1<-lm(formula = mpg ~ am   + wt + qsec+am*wt, data = mtcars)
fit2<-lm(formula=mpg ~ am   + wt + qsec+am*wt + am*disp, data = mtcars)
anova(fit1,fit2)
summarize(fit1)
summary(fit1)
fit1<-lm(formula = mpg ~ am   + wt + qsec+am*wt, data = mtcars)
fit2<-lm(formula=mpg ~ am   + wt + qsec+am*wt + disp, data = mtcars)
anova(fit1,fit2)
fit1<-lm(formula = mpg ~ am   + wt + qsec+am*wt, data = mtcars)
fit2<-lm(formula=mpg ~ am   + wt + qsec+am*wt + drat, data = mtcars)
anova(fit1,fit2)
fit1<-lm(formula = mpg ~ am   + wt +am*wt, data = mtcars)
fit2<-lm(formula=mpg ~ am   + wt + qsec+am*wt, data = mtcars)
anova(fit1,fit2)
fit1<-lm(formula = mpg ~ am   + wt+ qsec+am*wt, data = mtcars)
fit2<-lm(formula=mpg ~ am   + wt + qsec+am*wt+wt*qsec, data = mtcars)
anova(fit1,fit2)
fit1<-lm(formula = mpg ~ am   + wt+ qsec+am*wt, data = mtcars)
fit2<-lm(formula=mpg ~ am   + wt + qsec+am*wt+vs, data = mtcars)
anova(fit1,fit2)
fit1<-lm(formula = mpg ~ am   + wt+ qsec+am*wt, data = mtcars)
fit2<-lm(formula=mpg ~ am   + wt + qsec+am*wt+vs*am, data = mtcars)
anova(fit1,fit2)
fit1<-lm(formula = mpg ~ am   + wt+ qsec+am*wt, data = mtcars)
fit2<-lm(formula=mpg ~ am   + wt + qsec+am*wt+vs*am, data = mtcars)
anova(fit1,fit2)
fit1<-lm(formula = mpg ~ am   + wt+ qsec+am*wt, data = mtcars)
fit2<-lm(formula=mpg ~ am   + wt + qsec+am*wt+gear, data = mtcars)
anova(fit1,fit2)
fit1<-lm(formula = mpg ~ am   + wt+ qsec+am*wt, data = mtcars)
fit2<-lm(formula=mpg ~ am   + wt + qsec+am*wt+factor(gear), data = mtcars)
anova(fit1,fit2)
fit1<-lm(formula = mpg ~ am   + wt+ qsec+am*wt, data = mtcars)
fit2<-lm(formula=mpg ~ am   + wt + qsec+am*wt+am*factor(gear), data = mtcars)
anova(fit1,fit2)
fit1<-lm(formula = mpg ~ am   + wt+ qsec+am*wt, data = mtcars)
fit2<-lm(formula=mpg ~ am   + wt + qsec+am*wt+wt*factor(gear), data = mtcars)
anova(fit1,fit2)
fit1<-lm(formula = mpg ~ am   + wt+ qsec+am*wt, data = mtcars)
fit2<-lm(formula=mpg ~ am   + wt + qsec+am*wt+carb, data = mtcars)
anova(fit1,fit2)
fit1<-lm(formula = mpg ~ am   + wt+ qsec+am*wt, data = mtcars)
fit2<-lm(formula=mpg ~ am   + wt + qsec+am*wt+factor(carb), data = mtcars)
anova(fit1,fit2)
fit1<-lm(formula = mpg ~ am   + wt+ qsec+am*wt, data = mtcars)
fit2<-lm(formula=mpg ~ am   + wt + qsec+am*wt+factor(carb)*am, data = mtcars)
anova(fit1,fit2)
summary(fit1)
14.1/4.1
---
title: "MPG Regression Analysis"
author: "Saul Grimaldo"
date: "July 27, 2014"
output: pdf_document
---
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
summary(cars)
```
You can also embed plots, for example:
```{r, echo=FALSE}
plot(cars)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
---
title: "MPG Regression Analysis"
author: "Saul Grimaldo"
date: "July 27, 2014"
output: pdf_document
---
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
summary(cars)
```
You can also embed plots, for example:
```{r, echo=FALSE}
plot(cars)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
install.packages("pdflatex")
library(knitr)
?mtcars
View(mtcars)
points(mtcars$mpg,mtcars$wt,pch=19,col=((mtcars$am)))
?mtcars
fit1<-lm(formula = mpg ~ am + wt+ qsec+am*wt+hp+factor(cyl), data = mtcars)
anova(fit1,fit2)
summary(fit1)
fit1<-lm(formula = mpg ~ am + wt+am*wt+hp+factor(cyl), data = mtcars)
#anova(fit1,fit2)
summary(fit1)
fit1<-lm(formula = mpg ~ factor(am) + wt+am*wt+hp+factor(cyl), data = mtcars)
fit1<-lm(formula = mpg ~ factor(am) + wt+am*wt+hp+factor(cyl), data = mtcars)
#anova(fit1,fit2)
summary(fit1)
fit1<-lm(formula = mpg ~ as.factor(am) + wt+am*wt+hp+factor(cyl), data = mtcars)
#anova(fit1,fit2)
summary(fit1)
fit1<-lm(formula = mpg ~ as.factor(am) + wt+hp+factor(cyl), data = mtcars)
summary(fit1)
fit1<-lm(formula = mpg ~ am + wt+hp+factor(cyl), data = mtcars)
#anova(fit1,fit2)
summary(fit1)
fit1<-lm(formula = mpg ~ am + am*wt+am*hp+am*factor(cyl), data = mtcars)
#anova(fit1,fit2)
summary(fit1)
fit1<-lm(formula = mpg ~ am*wt+am*qsec, data = mtcars)
#anova(fit1,fit2)
summary(fit1)
fit1<-lm(formula = mpg ~ am*wt+am*hp, data = mtcars)
#anova(fit1,fit2)
summary(fit1)
fit1<-lm(formula = mpg ~ am*wt+hp, data = mtcars)
summary(fit1)
fit1<-lm(formula = mpg ~ am*wt+hp+qsec, data = mtcars)
summary(fit1)
fit1<-lm(formula = mpg ~ am*wt+hp+factor(cyl), data = mtcars)
#anova(fit1,fit2)
summary(fit1)
fit1<-lm(formula = mpg ~ am*wt+hp+factor(cyl)*hp+factor(cyl)*am, data = mtcars)
#anova(fit1,fit2)
summary(fit1)
fit1<-lm(formula = mpg ~ am*wt+hp, data = mtcars)
#anova(fit1,fit2)
summary(fit1)
fit1<-lm(formula = hp ~ qsec, data = mtcars)
summary(fit1)
plot(mtcars$cyl,mtcars$hp)
?mtcars
col=c(2,1), lwd=1, lty=c(1,2),
col=c("red","black"), lwd=1, lty=c(1,2),
11.5548/3.5779
install.packages(scatterplot3d)
install.packages("scatterplot3d")
?scatterplot3d
setwd("/Users/saulgrimaldo/Desktop/Coursera/ExData_Plotting1")
if (!file.exists("household_power_consumption.txt")) {
download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip", destfile = "power.zip", method="curl")
unzip("power.zip")
}
hhPower<-read.table("household_power_consumption.txt",header=TRUE,sep=';', na.strings="?")
hhPower<-subset(hhPower,hhPower$Date=="1/2/2007" | hhPower$Date=="2/2/2007")
View(hhPower)
hhPower$DateTime<-paste(hhPower$Date,hhPower$Time)
hhPower$DateTime<strptime(hhPower$DateTime,format="%d/%m/%Y %H:%M:%S")
hhPower$DateTime<-strptime(hhPower$DateTime,format="%d/%m/%Y %H:%M:%S")
plot(hhPower$DateTime,hhPower$Global_active_power)
plot(hhPower$DateTime,hhPower$Global_active_power, type="n")
plot(hhPower$DateTime,hhPower$Global_active_power, type="o")
plot(hhPower$DateTime,hhPower$Global_active_power, type="l")
plot(hhPower$DateTime,hhPower$Global_active_power, type="l", ylab="Global Active Power (kilowatts)")
plot(hhPower$DateTime,hhPower$Global_active_power, type="l", axes=FALSE, ylab="Global Active Power (kilowatts)")
plot(hhPower$DateTime,hhPower$Global_active_power, type="l", ann=FALSE, ylab="Global Active Power (kilowatts)")
plot(hhPower$DateTime,hhPower$Global_active_power, type="l", xlab=FALSE, ylab="Global Active Power (kilowatts)")
plot(hhPower$DateTime,hhPower$Global_active_power, type="l", xlab=, ylab="Global Active Power (kilowatts)")
lot(hhPower$DateTime,hhPower$Global_active_power, type="l", xlab=, ylab="Global Active Power (kilowatts)")
plot(hhPower$DateTime,hhPower$Global_active_power, type="l", xlab=NULL, ylab="Global Active Power (kilowatts)")
plot(hhPower$DateTime,hhPower$Global_active_power, type="l", xlab=NULL, ylab="Global Active Power (kilowatts)")
plot(hhPower$DateTime,hhPower$Global_active_power, type="l", xlab="", ylab="Global Active Power (kilowatts)")
if (!file.exists("household_power_consumption.txt")) {
download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip", destfile = "power.zip", method="curl")
unzip("power.zip")
}
hhPower<-read.table("household_power_consumption.txt",header=TRUE,sep=';', na.strings="?")
hhPower<-subset(hhPower,hhPower$Date=="1/2/2007" | hhPower$Date=="2/2/2007")
hhPower$DateTime<-paste(hhPower$Date,hhPower$Time)
hhPower$DateTime<-strptime(hhPower$DateTime,format="%d/%m/%Y %H:%M:%S")
png(filename="plot2.png", width=480, height=480, units="px")
plot(hhPower$DateTime,hhPower$Global_active_power, type="l", xlab="", ylab="Global Active Power (kilowatts)")
dev.off
png(filename="plot2.png", width=480, height=480, units="px")
plot(hhPower$DateTime,hhPower$Global_active_power, type="l", xlab="", ylab="Global Active Power (kilowatts)")
dev.off
png(filename="plot2.png", width=480, height=480, units="px")
plot(hhPower$DateTime,hhPower$Global_active_power, type="l", xlab="", ylab="Global Active Power (kilowatts)")
dev.off()
plot(hhPower$DateTime,hhPower$Global_active_power, type="l", xlab="", ylab="Global Active Power (kilowatts)")
points(hhPower$Sub_metering1,hhPower$Sub_metering2,hhpower$Sub_metering3)
plot(hhPower$DateTime,hhPower$Global_active_power, type="l", xlab="", ylab="Global Active Power (kilowatts)")
points(hhPower$Sub_metering1,hhPower$Sub_metering2,hhPower$Sub_metering3)
#Checks if data is in working directory. If not, downloads it and unzips it.
if (!file.exists("household_power_consumption.txt")) {
download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip", destfile = "power.zip", method="curl")
unzip("power.zip")
}
#Reads data in. If a "?" appears, it is treated as an NA
hhPower<-read.table("household_power_consumption.txt",header=TRUE,sep=';', na.strings="?")
#Stores only the subset of the dataset from Feb 1 and Feb 2 2007.
hhPower<-subset(hhPower,hhPower$Date=="1/2/2007" | hhPower$Date=="2/2/2007")
#Combines the Date and time string variables
hhPower$DateTime<-paste(hhPower$Date,hhPower$Time)
#Changes the DateTime variable into Time format from string format
hhPower$DateTime<-strptime(hhPower$DateTime,format="%d/%m/%Y %H:%M:%S")
#Creates Plot3
png(filename="plot3.png", width=480, height=480, units="px")
plot(hhPower$DateTime,hhPower$Global_active_power, type="l", xlab="", ylab="Energy sub metering")
points(hhPower$Sub_metering1,hhPower$Sub_metering2,hhPower$Sub_metering3)
dev.off()
png(filename="plot3.png", width=480, height=480, units="px")
plot(hhPower$DateTime,hhPower$Sub_metering_1, type="l", xlab="", ylab="Energy sub metering")
points(hhPower$Sub_metering1,hhPower$Sub_metering2,hhPower$Sub_metering3)
dev.off()
#Checks if data is in working directory. If not, downloads it and unzips it.
if (!file.exists("household_power_consumption.txt")) {
download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip", destfile = "power.zip", method="curl")
unzip("power.zip")
}
#Reads data in. If a "?" appears, it is treated as an NA
hhPower<-read.table("household_power_consumption.txt",header=TRUE,sep=';', na.strings="?")
#Stores only the subset of the dataset from Feb 1 and Feb 2 2007.
hhPower<-subset(hhPower,hhPower$Date=="1/2/2007" | hhPower$Date=="2/2/2007")
#Combines the Date and time string variables
hhPower$DateTime<-paste(hhPower$Date,hhPower$Time)
#Changes the DateTime variable into Time format from string format
hhPower$DateTime<-strptime(hhPower$DateTime,format="%d/%m/%Y %H:%M:%S")
#Creates Plot3
png(filename="plot3.png", width=480, height=480, units="px")
plot(hhPower$DateTime,c(hhPower$Sub_metering1,hhPower$Sub_metering2,hhPower$Sub_metering3), type="l", xlab="", ylab="Energy sub metering")
dev.off()
plot(hhPower$DateTime,hhPower$Sub_metering1, type="l", xlab="", ylab="Energy sub metering")
plot(hhPower$DateTime,hhPower$Sub_metering_1, type="l", xlab="", ylab="Energy sub metering")
png(filename="plot3.png", width=480, height=480, units="px")
plot(hhPower$DateTime,hhPower$Sub_metering_1, type="l", xlab="", ylab="Energy sub metering")
dev.off()
png(filename="plot3.png", width=480, height=480, units="px")
plot(hhPower$DateTime,c(hhPower$Sub_metering_1,hhPower$Sub_metering_2,hhPower$Sub_metering_3), type="l", xlab="", ylab="Energy sub metering")
dev.off()
png(filename="plot3.png", width=480, height=480, units="px")
plot(c(hhPower$DateTime,hhPower$DateTime,hhPower$DateTime),c(hhPower$Sub_metering_1,hhPower$Sub_metering_2,hhPower$Sub_metering_3), type="l", xlab="", ylab="Energy sub metering")
dev.off()
png(filename="plot3.png", width=480, height=480, units="px")
plot(c(hhPower$DateTime,hhPower$DateTime,hhPower$DateTime),c(hhPower$Sub_metering_1,hhPower$Sub_metering_2,hhPower$Sub_metering_3), type="l", col=c("black","red","blue"), ylab="Energy sub metering")
dev.off()
png(filename="plot3.png", width=480, height=480, units="px")
plot(hhPower$DateTime,hhPower$Sub_metering_1, type="l",xlab="" ylab="Energy sub metering")
lines(hhPower$DateTime,hhPower$Sub_metering_2, type="l",col="red")
lines(hhPower$DateTime,hhPower$Sub_metering_3, type="l",col="blue")
dev.off()
png(filename="plot3.png", width=480, height=480, units="px")
plot(hhPower$DateTime,hhPower$Sub_metering_1, type="l",xlab="" ylab="Energy sub metering")
lines(hhPower$DateTime,hhPower$Sub_metering_2, type="l",col="red")
lines(hhPower$DateTime,hhPower$Sub_metering_3, type="l",col="blue")
dev.off()
png(filename="plot3.png", width=480, height=480, units="px")
plot(hhPower$DateTime,hhPower$Sub_metering_1, type="l",xlab="", ylab="Energy sub metering")
lines(hhPower$DateTime,hhPower$Sub_metering_2, type="l",col="red")
lines(hhPower$DateTime,hhPower$Sub_metering_3, type="l",col="blue")
dev.off()
png(filename="plot3.png", width=480, height=480, units="px")
plot(c(hhPower$DateTime,hhPower$DateTime,hhPower$DateTime),c(hhPower$Sub_metering_1,hhPower$Sub_metering_2,hhPower$Sub_metering_3), type="l", col=c("black","red","blue"),xlab="", ylab="Energy sub metering")
dev.off()
png(filename="plot3.png", width=480, height=480, units="px")
plot(hhPower$DateTime,hhPower$Sub_metering_1, type="l",xlab="", ylab="Energy sub metering")
lines(hhPower$DateTime,hhPower$Sub_metering_2, type="l",col="red")
lines(hhPower$DateTime,hhPower$Sub_metering_3, type="l",col="blue")
dev.off()
png(filename="plot3.png", width=480, height=480, units="px")
plot(hhPower$DateTime,hhPower$Sub_metering_1, type="l",xlab="", ylab="Energy sub metering")
lines(hhPower$DateTime,hhPower$Sub_metering_2, type="l",col="red")
lines(hhPower$DateTime,hhPower$Sub_metering_3, type="l",col="blue")
legendTxt <-c("Sub Metering 1","Sub Metering 2", "Sub Metering 3")
legend("topright",c("Sub Metering 1","Sub Metering 2", "Sub Metering 3"),lty=c(1,1,1),lwd=c(2.5,2.5,2.5),col=c("black","blue","red"))
dev.off()
#Checks if data is in working directory. If not, downloads it and unzips it.
if (!file.exists("household_power_consumption.txt")) {
download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip", destfile = "power.zip", method="curl")
unzip("power.zip")
}
#Reads data in. If a "?" appears, it is treated as an NA
hhPower<-read.table("household_power_consumption.txt",header=TRUE,sep=';', na.strings="?")
#Stores only the subset of the dataset from Feb 1 and Feb 2, 2007.
hhPower<-subset(hhPower,hhPower$Date=="1/2/2007" | hhPower$Date=="2/2/2007")
#Combines the Date and time string variables
hhPower$DateTime<-paste(hhPower$Date,hhPower$Time)
#Changes the DateTime variable into Time format from string format
hhPower$DateTime<-strptime(hhPower$DateTime,format="%d/%m/%Y %H:%M:%S")
#Creates Plot4.png
png(filename="plot4.png", width=480, height=480, units="px")
par(mfrow=c(2,2))
#graph1 1
#graph 2
plot(hhPower$DateTime,hhPower$Global_active_power,type="l",
xlab="",ylab="Global Active Power")
#graph 2
plot(hhPower$DateTime,hhPower$Voltage,type="l",
xlab="datetime",ylab="Voltage")
#graph 3
plot(x=hhPower$DateTime,y=hhPower$Sub_metering_1,type="l",
xlab="",ylab="Energy Sub Meetering")
lines(x=hhPower$DateTime,y=hhPower$Sub_metering_2, type="l",col="red")
lines(x=hhPower$DateTime,y=hhPower$Sub_metering_3, type="l",col="blue")
legendTxt <-c("Sub Meetering 1","Sub Meetering 2", "Sub Meetering 3")
legend("topright",c("Sub Metering 1","Sub Metering 2", "Sub Metering 3"),lty=c(1,1,1),lwd=c(2.5,2.5,2.5),col=c("black","blue","red"))
#graph 2 again
plot(hhPower$DateTime,hhPower$Global_reactive_power,type="l",
xlab="datetime",ylab="Global_reactive_power")
dev.off()
